name: Deploy AWS Lambdas

on:
  push:
    branches:
      - main
    paths:
      - 'lambdas/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # <<-- importante para poder comparar commits

      - name: Detect changed Lambda folders
        id: detect
        shell: bash
        run: |
          # Obtiene la lista de archivos cambiados entre before y after
          echo "GITHUB EVENT BEFORE: '${{ github.event.before }}'"
          echo "GITHUB SHA: '${{ github.sha }}'"

          # Si github.event.before es vac√≠o o all-zero, detectar cambios contra HEAD~1
          BEFORE="${{ github.event.before }}"
          if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            BEFORE=$(git rev-parse HEAD^1 || echo "")
          fi

          # Hacemos diff; si BEFORE est√° vac√≠o, listamos archivos del commit actual
          if [ -n "$BEFORE" ]; then
            CHANGED=$(git diff --name-only "$BEFORE" "${{ github.sha }}" | grep '^lambdas/' | cut -d'/' -f2 | sort -u)
          else
            CHANGED=$(git show --name-only --pretty="" "${{ github.sha }}" | grep '^lambdas/' | cut -d'/' -f2 | sort -u)
          fi

          # Normalizar a una sola l√≠nea separada por newlines
          if [ -z "$CHANGED" ]; then
            echo "No lambda folders changed."
          else
            echo "Changed lambdas (one per line):"
            echo "$CHANGED"
          fi

          # Exportar a GITHUB_OUTPUT de forma segura
          echo "changed<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug changed output
        shell: bash
        env:
          CHANGED_FROM_STEP: ${{ steps.detect.outputs.changed }}
        run: |
          printf 'DEBUG: raw detect output follows (may be empty):\n%s\n' "$CHANGED_FROM_STEP"
          # Mostrar cada carpeta detectada en l√≠neas separadas:
          if [ -n "$CHANGED_FROM_STEP" ]; then
            echo "Detected folders:"
            echo "$CHANGED_FROM_STEP" | sed '/^$/d' | while IFS= read -r line; do
              echo "- [$line]"
            done
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::880140151067:role/GitHubActionRole
          aws-region: us-east-1

      - name: Deploy changed Lambdas
        if: ${{ steps.detect.outputs.changed != '' }}
        shell: bash
        env:
          CHANGED_LIST: ${{ steps.detect.outputs.changed }}
          ROLE_ARN: "arn:aws:iam::880140151067:role/LambdaExecutionRole"
        run: |
          set -euo pipefail
          if [ -z "$CHANGED_LIST" ]; then
            echo "No lambdas to deploy."
            exit 0
          fi

          # Iterar por cada carpeta (una por l√≠nea)
          IFS=$'\n'
          for lambda_dir in $CHANGED_LIST; do
            lambda_dir="$(echo "$lambda_dir" | xargs)"   # trim
            [ -z "$lambda_dir" ] && continue
            echo "üöÄ Deploying Lambda: '$lambda_dir'"
            cd "lambdas/$lambda_dir" || { echo "Folder lambdas/$lambda_dir not found"; continue; }

            mkdir -p package

            if [ -f requirements.txt ]; then
              pip install -r requirements.txt -t ./package
            fi

            # Copiar c√≥digo
            cp -r *.py ./package/ 2>/dev/null || true

            cd package
            zip -r ../function.zip .
            cd ..

            FUNCTION_NAME="$lambda_dir"

            if aws lambda get-function --function-name "$FUNCTION_NAME" >/dev/null 2>&1; then
              echo "üîÅ Updating existing Lambda: $FUNCTION_NAME"
              aws lambda update-function-code \
                --function-name "$FUNCTION_NAME" \
                --zip-file fileb://function.zip
            else
              echo "üÜï Creating new Lambda: $FUNCTION_NAME"
              aws lambda create-function \
                --function-name "$FUNCTION_NAME" \
                --runtime python3.11 \
                --role "$ROLE_ARN" \
                --handler lambda_function.lambda_handler \
                --zip-file fileb://function.zip
            fi

            # Volver al workspace
            cd ../..
            rm -f function.zip
          done
