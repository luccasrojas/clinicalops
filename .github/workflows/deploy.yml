name: Deploy AWS Lambdas

on:
  push:
    branches:
      - lambdas
    paths:
      - 'lambdas/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed Lambdas
        id: detect
        run: |
          CHANGED=$(ls -1 lambdas)
          echo "Changed lambdas: $CHANGED"
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::880140151067:role/GitHubActionRole
          aws-region: us-east-1

      - name: Deploy changed Lambdas
        if: ${{ steps.detect.outputs.changed != '' }}
        run: |
          set -e
          for lambda_dir in ${{ steps.detect.outputs.changed }}; do
            echo "üöÄ Deploying Lambda: $lambda_dir"
            cd lambdas/$lambda_dir

            # Crear carpeta de paquete
            mkdir -p package

            # Instalar dependencias dentro del contenedor oficial de Lambda
            if [ -f requirements.txt ]; then
              echo "üì¶ Instalando dependencias para $lambda_dir dentro del contenedor Lambda..."
              docker run --rm -v "$PWD":/var/task --entrypoint /bin/bash public.ecr.aws/lambda/python:3.11 \
                -c "pip install -r requirements.txt -t package"
            fi

            # Copiar archivos .py (dentro del mismo directorio actual)
            cp -r ./*.py ./package/ 2>/dev/null || true

            # Crear el ZIP
            cd package
            zip -r ../function.zip . > /dev/null
            cd ..

            # Leer configuraci√≥n YAML (o usar valores por defecto)
            CONFIG_FILE="lambda_config.yml"
            if [ -f "$CONFIG_FILE" ]; then
              RUNTIME=$(yq -r '.runtime // "python3.11"' $CONFIG_FILE)
              MEMORY=$(yq -r '.memory_size // 256' $CONFIG_FILE)
              TIMEOUT=$(yq -r '.timeout // 30' $CONFIG_FILE)
              DESCRIPTION=$(yq -r '.description // "Lambda function '$lambda_dir'"' $CONFIG_FILE)
              HANDLER=$(yq -r '.handler // "lambda_function.lambda_handler"' $CONFIG_FILE)
            else
              echo "‚ö†Ô∏è No config file found for $lambda_dir, using defaults."
              RUNTIME="python3.11"
              MEMORY=256
              TIMEOUT=30
              DESCRIPTION="Lambda function $lambda_dir"
              HANDLER="lambda_function.lambda_handler"
            fi

            ROLE_ARN="arn:aws:iam::880140151067:role/LambdaExecutionRole"
            FUNCTION_NAME=$lambda_dir

            if aws lambda get-function --function-name $FUNCTION_NAME >/dev/null 2>&1; then
              echo "üîÅ Updating existing Lambda: $FUNCTION_NAME"
              aws lambda update-function-code \
                --function-name $FUNCTION_NAME \
                --zip-file fileb://function.zip

              echo "‚è≥ Waiting for code update to complete..."
              aws lambda wait function-updated --function-name $FUNCTION_NAME

              aws lambda update-function-configuration \
                --function-name $FUNCTION_NAME \
                --runtime $RUNTIME \
                --memory-size $MEMORY \
                --timeout $TIMEOUT \
                --description "$DESCRIPTION" \
                --handler $HANDLER
            else
              echo "üÜï Creating new Lambda: $FUNCTION_NAME"
              aws lambda create-function \
                --function-name $FUNCTION_NAME \
                --runtime $RUNTIME \
                --role $ROLE_ARN \
                --handler $HANDLER \
                --memory-size $MEMORY \
                --timeout $TIMEOUT \
                --description "$DESCRIPTION" \
                --zip-file fileb://function.zip
            fi

            cd ../..
          done

      - name: Clean up removed Lambdas
        run: |
          echo "üßπ Checking for Lambdas to delete..."
          set -e

          LOCAL_LAMBDAS=$(ls -1 lambdas | tr '\n' ' ')
          AWS_LAMBDAS=$(aws lambda list-functions \
            --query "Functions[?starts_with(FunctionName, '')].FunctionName" \
            --output text)

          for fn in $AWS_LAMBDAS; do
            local_name=${fn}
            if ! echo "$LOCAL_LAMBDAS" | grep -qw "$local_name"; then
              echo "üóëÔ∏è Deleting Lambda not found locally: $fn"
              aws lambda delete-function --function-name "$fn"
            fi
          done
